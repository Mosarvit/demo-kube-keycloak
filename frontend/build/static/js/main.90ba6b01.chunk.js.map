{"version":3,"sources":["accessToken.js","helpers/fetchHelper.js","components/Deck.js","helpers/stringHelper.js","components/HskLevel.js","components/Secured.js","components/App.js","index.js"],"names":["accessToken","getAccessToken","url","method","body","withCredentials","a","axios","headers","Authorization","data","response","exportFunctions","fetchWithAuthentication","Deck","useState","words","setWords","deckInput","setDeckInput","useEffect","fetchHelper","then","responseBody","deck","join","match","id","data-testid","rows","cols","value","onChange","e","target","type","onClick","HskLevel","hskLevel","setHskLevel","hsk_level","Secured","keycloak","setKeycloak","authenticated","setAuthenticated","Keycloak","realm","clientId","init","onLoad","checkLoginIframe","newAccessToken","token","style","border","logout","App","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAAIA,EAAc,GAEX,SAASC,IACd,OAAOD,E,yFCAT,WAAuCE,EAAKC,EAAQC,EAAMC,GAA1D,eAAAC,EAAA,sEACuBC,IAAM,CACzBJ,OAAQA,EACRD,IAAKA,EACLM,QAAS,CACP,eAAgB,mBAChBC,cAAe,UAAYR,KAE7BI,gBAAiBA,EACjBK,KAAMN,IATV,cACMO,EADN,yBAaSA,EAASD,MAblB,4C,sBAgBA,IAIeE,EAJS,CACtBC,wB,mDCfK,IAsDQC,EAtDK,WAAO,IAAD,EACEC,mBAAS,IADX,mBACjBC,EADiB,KACVC,EADU,OAEUF,mBAAS,IAFnB,mBAEjBG,EAFiB,KAENC,EAFM,KAoBxB,OAhBAC,qBAAU,WAIRC,EAAYR,wBAFV,6BAEuC,OAAOS,MAAK,SAAAC,GAEnD,OADAN,EAASM,EAAaC,KAAKR,OACpBG,EAAaI,EAAaC,KAAKR,MAAMS,KAAK,YAElD,IAEHL,qBAAU,cAAU,CAACJ,IAErBI,qBAAU,WACRH,EAAoBC,ECrBXQ,MAAM,gBDsBd,CAACR,IAGF,2BACE,wBAAMS,GAAG,cAAT,WACA,4BACEC,cAAY,OACZC,KAAK,KACLC,KAAK,KACLC,MAAOb,EACPc,SAAU,SAAAC,GACRd,EAAac,EAAEC,OAAOH,UAG1B,0BACEI,KAAK,SACLC,QAAS,WAMPf,EACGR,wBALD,iCAK8B,OAAQ,CAAEW,KAAM,CAAER,MAAOA,KACtDM,MAAK,SAAAC,GAEJ,OADAN,EAASM,EAAaC,KAAKR,OACpBG,EAAaI,EAAaC,KAAKR,MAAMS,KAAK,YAZzD,YEMSY,EAvCS,WAAO,IAAD,EACItB,qBADJ,mBACrBuB,EADqB,KACXC,EADW,KAe5B,OAZAnB,qBAAU,WAKRC,EAAYR,wBAHV,kCAGuC,OAAOS,MAAK,SAAAC,GACnD,OAAOgB,EAAYhB,EAAaiB,gBAEjC,IAEHpB,qBAAU,cAAU,CAACkB,IAGnB,0CACc,wBAAMV,cAAY,aAAaU,GAC3C,0BACEH,KAAK,SACLC,QAAS,WAMPf,EACGR,wBALD,4CAK8B,QAC7BS,MAAK,SAAAC,GACJ,OAAOgB,EAAYhB,EAAaiB,gBAXxC,OCyHSC,EAxIC,WAAO,IAAD,EACY1B,mBAAS,MADrB,mBACb2B,EADa,KACHC,EADG,OAEsB5B,oBAAS,GAF/B,mBAEb6B,EAFa,KAEEC,EAFF,KA4DpB,OA9CAzB,qBAAU,WAER,IAKMsB,EAAW,IAAII,IALN,CACbC,MAAO,UACP7C,IAAK,wBACL8C,SAAU,SAIZN,EACGO,KAAK,CAAEC,OAAQ,iBAAkBC,kBAAkB,IACnD7B,MAAK,SAAAsB,GL1BL,IAAwBQ,EK2BvBT,EAAYD,GL3BWU,EK4BRV,EAASW,ML3B9BrD,EAAcoD,EK4BRP,EAAiBD,QAEpB,IA+BD,2BACGA,EACC,2BAEE,uBAAKU,MAAO,CAAEC,OAAQ,oBACpB,gBAAC,EAAD,OAEF,uBAAKD,MAAO,CAAEC,OAAQ,oBACpB,gBAAC,EAAD,OAEF,uBAAKD,MAAO,CAAEC,OAAQ,oBACpB,0BAAQnB,QAAS,WAfzBM,EAASc,WAeD,YAIJ,wDCjEOC,EAfI,WAMjB,OALAC,QAAQC,IACN,0DAKA,2BACE,2BACE,gBAAC,EAAD,SCRRC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.90ba6b01.chunk.js","sourcesContent":["let accessToken = \"\";\n\nexport function getAccessToken() {\n  return accessToken;\n}\n\nexport function setAccessToken(newAccessToken) {\n  accessToken = newAccessToken;\n}\n","import axios from \"axios\";\nimport { getAccessToken } from \"../accessToken\";\n\nasync function fetchWithAuthentication(url, method, body, withCredentials) {\n  let response = await axios({\n    method: method,\n    url: url,\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: \"Bearer \" + getAccessToken()\n    },\n    withCredentials: withCredentials,\n    data: body\n  });\n  // setAccessToken(response.headers[\"access-token\"]);\n\n  return response.data;\n}\n\nconst exportFunctions = {\n  fetchWithAuthentication\n};\n\nexport default exportFunctions;\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport fetchHelper from \"../helpers/fetchHelper\";\nimport { splitLines } from \"../helpers/stringHelper\";\n\nexport const Deck = () => {\n  const [words, setWords] = useState([]);\n  const [deckInput, setDeckInput] = useState(\"\");\n\n  useEffect(() => {\n    const url =\n      \"http://\" + process.env.REACT_APP_L_AUTHENTICATION_SERVER_HOST + \"/deck\";\n\n    fetchHelper.fetchWithAuthentication(url, \"get\").then(responseBody => {\n      setWords(responseBody.deck.words);\n      return setDeckInput(responseBody.deck.words.join(\"\\n\"));\n    });\n  }, []);\n\n  useEffect(() => {}, [words]);\n\n  useEffect(() => {\n    setWords(splitLines(deckInput));\n  }, [deckInput]);\n\n  return (\n    <div>\n      <span id=\"deck-label\">Deck : </span>\n      <textarea\n        data-testid=\"deck\"\n        rows=\"12\"\n        cols=\"10\"\n        value={deckInput}\n        onChange={e => {\n          setDeckInput(e.target.value);\n        }}\n      />\n      <button\n        type=\"submit\"\n        onClick={() => {\n          const url =\n            \"http://\" +\n            process.env.REACT_APP_L_AUTHENTICATION_SERVER_HOST +\n            \"/set-deck\";\n\n          fetchHelper\n            .fetchWithAuthentication(url, \"post\", { deck: { words: words } })\n            .then(responseBody => {\n              setWords(responseBody.deck.words);\n              return setDeckInput(responseBody.deck.words.join(\"\\n\"));\n            });\n        }}\n      >\n        Submit\n      </button>\n    </div>\n  );\n};\n\nexport default Deck;\n","export function splitLines(str) {\n  return str.match(/[^\\r\\n]+/g);\n}\n","import * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport fetchHelper from \"../helpers/fetchHelper\";\n\nexport const HskLevel = () => {\n  const [hskLevel, setHskLevel] = useState();\n\n  useEffect(() => {\n    const url =\n      \"http://\" +\n      process.env.REACT_APP_L_AUTHENTICATION_SERVER_HOST +\n      \"/hsk-level\";\n    fetchHelper.fetchWithAuthentication(url, \"get\").then(responseBody => {\n      return setHskLevel(responseBody.hsk_level);\n    });\n  }, []);\n\n  useEffect(() => {}, [hskLevel]);\n\n  return (\n    <div>\n      HSK Level : <span data-testid=\"hsk_level\">{hskLevel}</span>\n      <button\n        type=\"button\"\n        onClick={() => {\n          const url =\n            \"http://\" +\n            process.env.REACT_APP_L_AUTHENTICATION_SERVER_HOST +\n            \"/increment-hsk-level\";\n\n          fetchHelper\n            .fetchWithAuthentication(url, \"post\")\n            .then(responseBody => {\n              return setHskLevel(responseBody.hsk_level);\n            });\n        }}\n      >\n        +\n      </button>\n    </div>\n  );\n};\n\nexport default HskLevel;\n","import Keycloak from \"keycloak-js\";\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { setAccessToken } from \"../accessToken\";\nimport Deck from \"./Deck\";\nimport HskLevel from \"./HskLevel\";\n\nconst Secured = () => {\n  const [keycloak, setKeycloak] = useState(null);\n  const [authenticated, setAuthenticated] = useState(false);\n  // const [response, setResponse] = useState(null);\n\n  // function authorizationHeader() {\n  //   if (!keycloak) return {};\n  //   return {\n  //     headers: {\n  //       Authorization: \"Bearer \" + getAccessToken()\n  //     }\n  //   };\n  // }\n\n  useEffect(() => {\n    // const keycloak = Keycloak(\"/keycloak.json\");\n    let kcConfig = {\n      realm: \"L-REALM\",\n      url: \"http://\" + process.env.REACT_APP_L_KEYCLOAK_SERVER_HOST,\n      clientId: \"l-ui\"\n    };\n    const keycloak = new Keycloak(kcConfig);\n\n    keycloak\n      .init({ onLoad: \"login-required\", checkLoginIframe: false })\n      .then(authenticated => {\n        setKeycloak(keycloak);\n        setAccessToken(keycloak.token);\n        setAuthenticated(authenticated);\n      });\n  }, []);\n  // useEffect(() => {}, [keycloak]);\n\n  // useEffect(() => {\n  //   setAccessToken(keycloak.token);\n  // }, [keycloak]);\n\n  // useEffect(() => {\n  //   fetch(\"http://localhost:7000/hsk-level\", this.authorizationHeader())\n  //     .then(response => {\n  //       if (response.status === 200) return response.json();\n  //       else return { status: response.status, message: response.statusText };\n  //     })\n  //     .then(json => setResponse(JSON.stringify(json, null, 2)))\n  //     .catch(err => setResponse(err.toString()));\n  // }, []);\n  // const handleClick = () => {\n  //   fetch(\"http://localhost:7000/hsk-level\", authorizationHeader())\n  //     .then(response => {\n  //       if (response.status === 200) return response.json();\n  //       else return { status: response.status, message: response.statusText };\n  //     })\n  //     .then(json => setResponse(JSON.stringify(json, null, 2)))\n  //     .catch(err => setResponse(err.toString()));\n  // };\n\n  function logout() {\n    keycloak.logout();\n  }\n\n  return (\n    <div>\n      {authenticated ? (\n        <div>\n          {/* <div>Response: {response}</div> */}\n          <div style={{ border: \"1px solid black\" }}>\n            <HskLevel />\n          </div>\n          <div style={{ border: \"1px solid black\" }}>\n            <Deck />\n          </div>\n          <div style={{ border: \"1px solid black\" }}>\n            <button onClick={() => logout()}>Logout</button>\n          </div>\n        </div>\n      ) : (\n        <div>Waiting to authenticate</div>\n      )}\n    </div>\n  );\n  // if (keycloak) {\n  //   if (authenticated)\n  //     return (\n  //       <div>\n  //         <p>\n  //           This is a Keycloak-secured component of your application. You\n  //           shouldn't be able to see this unless you've authenticated with\n  //           Keycloak.\n  //         </p>\n  //         {response}\n  //         {/* <UserInfo keycloak={keycloak} />\n  //         <QueryAPI keycloak={keycloak} />\n  //         <Logout keycloak={keycloak} /> */}\n  //       </div>\n  //     );\n  //   else return <div>Unable to authenticate!</div>;\n  // }\n  // return <div>Initializing Keycloak...</div>;\n};\n\n// class Secured extends Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = { keycloak: null, authenticated: false };\n//   }\n\n//   componentDidMount() {\n//     const keycloak = Keycloak(\"/keycloak.json\");\n//     keycloak\n//       .init({ onLoad: \"login-required\", checkLoginIframe: false })\n//       .then(authenticated => {\n//         this.setState({ keycloak: keycloak, authenticated: authenticated });\n//       });\n//   }\n\n//   render() {\n//     if (this.state.keycloak) {\n//       if (this.state.authenticated)\n//         return (\n//           <div>\n//             <p>\n//               This is a Keycloak-secured component of your application. You\n//               shouldn't be able to see this unless you've authenticated with\n//               Keycloak.\n//             </p>\n//             <UserInfo keycloak={this.state.keycloak} />\n//             <QueryAPI keycloak={this.state.keycloak} />\n//             <Logout keycloak={this.state.keycloak} />\n//           </div>\n//         );\n//       else return <div>Unable to authenticate!</div>;\n//     }\n//     return <div>Initializing Keycloak...</div>;\n//   }\n// }\n\nexport default Secured;\n","import * as React from \"react\";\nimport Secured from \"./Secured\";\n\nexport const App = () => {\n  console.log(\n    \"REACT_APP_L_AUTHENTICATION_SERVER_HOST: \" +\n      process.env.REACT_APP_L_AUTHENTICATION_SERVER_HOST\n  );\n\n  return (\n    <div>\n      <div>\n        <Secured />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}